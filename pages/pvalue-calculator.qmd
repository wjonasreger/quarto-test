---
title: "P-Value Calculator"
---

```{ojs}
//| echo: false
d3 = require("d3@7")
```

::: {.panel-tabset}

## Normal Distribution (JS)

::: {.panel-sidebar}
```{ojs}
//| echo: false

function set(input, value) {
  input.value = value;
  input.dispatchEvent(new Event("input", {bubbles: true}));
}

viewof direction = Inputs.radio(
  ["left", "middle", "right", "two-sided"],
  {value: "left", label: "Direction"}
)

viewof zscore = Inputs.range(
  [-3.5, 3.5], 
  {value: 1, step: 0.01, label: "Z Score:"}
)

viewof area = Inputs.range(
  [0, 1],
  {value: 0.5, label: "Area"}
)

Inputs.button("Calculate Z-Score", () => viewof zscore.value = 2)
zscore
```
:::

::: {.panel-fill layout="[ [1], [1,1] ]"}

```{ojs}
//| echo: false
import { pnorm, dnorm, plotGraph } from "../assets/js/pvalue.js"

{
  const context = DOM.context2d(480, 270);
  plotGraph(context, zscore, direction)
  return context.canvas; 
}
```

:::

## Normal Distribution (OJS)

::: {.panel-sidebar}
:::

::: {.panel-fill layout="[ [1], [1,1] ]"}
```{ojs}
//| echo: false
pnorm(zscore, direction) 
```

```{ojs}
//| echo: false
norm_data = await FileAttachment("../assets/documents/normal-table.csv").csv({ typed: true })

norm_area = norm_data.map(function(score) {
  if (direction==="left") {
    return score.Z > zscore ? NaN : score
  } else if (direction==="right") {
    return score.Z < zscore ? NaN : score
  } else if (direction==="middle") {
    return -Math.abs(zscore) > score.Z || Math.abs(zscore) < score.Z ? NaN : score
  } else {
    return -Math.abs(zscore) < score.Z && Math.abs(zscore) > score.Z ? NaN : score
  }
})

Plot.plot({
  grid: true,
  style: "max-width:100%;",
  marks: [
    Plot.line(norm_data, {x: "Z", y: "PDF"}),
    Plot.areaY(norm_area, {x: "Z", y: "PDF", fillOpacity: 0.25})
  ]
})
```
:::

:::